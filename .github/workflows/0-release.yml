#2024-05-07 23:30
name: 0 - release - code sign win

on:
  workflow_dispatch:
    inputs:
      manual:
        description: Manual run (bypass default conditions)
        type: boolean
        required: true
        default: true
      archive_tarxz:
        description: Create archive_tarxz
        type: boolean
        required: true
        default: false
      archive_tarxz1:
        description: Create archive_tarxz1
        type: boolean
        required: true
        default: false
      archive_tarxz2:
        description: Create archive_tarxz2
        type: boolean
        required: true
        default: false

#  push:
#    # Sequence of patterns matched against refs/tags
#    tags:
#      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  PRG_NAME: deskreen
  TAG_NAME: deskreen
  DEBUG_LS: "yes"

jobs:
#   create-release:
#     runs-on: ubuntu-latest
#     #runs-on: ubuntu-18.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
# 
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Deskreen Release ${{ github.ref }}
#           draft: true
#           # prerelease: false

  release:
#    name: Deskreen Release
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - { platform: win, os: windows-2022, artifact_name: 'release/*.msi,release/*.exe,release/*.yml' }
          # IMPORTANT!!! this LINUX os should be the same as in build-and-test and covecov workflows! this is for making sure caches are used in most efficient way
          - { platform: lin, os: ubuntu-22.04, artifact_name: 'release/*.AppImage,release/*.rpm,release/*.deb,release/*.yml' }
          - { platform: mac, os: macos-latest, artifact_name: 'release/*.dmg,release/*.zip,release/*.yml'               }

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get package.json
        shell: bash
        run: |
          echo 'PACKAGE_JSON<<EOF' >> $GITHUB_ENV
          cat ./package.json >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Get version
        shell: bash
        run: |
          export VERSION=${{ fromJson(env.PACKAGE_JSON).version }}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo $VERSION

      - name: Print version
        shell: bash
        run: |
          echo ${{ env.VERSION }}

      - name: Create source archive
        if: ${{ github.event.inputs.archive_tarxz == 'true' }}
        continue-on-error: true
        shell: bash
        run: |
          staging="$PRG_NAME-src-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.os}}"
          touch "$staging.tar.xz"
          #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
          #tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
          tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
          echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ matrix.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ matrix.os }}-yarn-

      - name: yarn install in ./app/client
        run: |
          cd ./app/client
          yarn install --frozen-lockfile

      - name: yarn install in ./
        run: yarn install --frozen-lockfile

      - name: yarn install in ./app
        run: |
          cd ./app
          yarn install --frozen-lockfile

      - name: Create source archive 1
        if: ${{ github.event.inputs.archive_tarxz1 == 'true' }}
        continue-on-error: true
        shell: bash
        run: |
          staging="$PRG_NAME-src1-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.os}}"
          touch "$staging.tar.xz"
          #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
          #tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
          tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
          echo "ASSET_SRC1=$staging.tar.xz" >> $GITHUB_ENV
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi

      - name: yarn build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn build

      - name: yarn lint
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn lint

      - name: yarn tsc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn tsc

      # - name: yarn test
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: yarn test

      # - name: yarn build-ux
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: yarn build-ux

      # - name: yarn test-ux
      #   uses: GabrielBB/xvfb-action@v1.2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     run: yarn test-ux

      - name: yarn package-ci
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn package-ci
      # TODO: add windows32 build step

      - name: Sign executable files
        if: ${{ matrix.platform == 'win' }}
        continue-on-error: true
        uses: deep-soft/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          # certificatename: '${{ secrets.WINDOWS_PFX_NAME }}'
          folder: './release'
          recursive: false

      - name: Create source archive 2
        if: ${{ github.event.inputs.archive_tarxz2 == 'true' }}
        continue-on-error: true
        shell: bash
        run: |
          staging="$PRG_NAME-src2-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.os}}"
          touch "$staging.tar.xz"
          #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
          #tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
          tar --exclude=*.tar* -cv . | xz -9 > "$staging.tar.xz"
          echo "ASSET_SRC2=$staging.tar.xz" >> $GITHUB_ENV
          if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
            echo "source archive name: "
            ls -l "$staging.tar.xz"
          fi

      - name: Publish Release
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}-${{ matrix.platform }}
          files: |
            ${{ matrix.artifact_name }}

      - name: Publish Release artifacts
        if: ${{ (github.event.inputs.archive_tarxz == 'true') || (github.event.inputs.archive_tarxz1 == 'true') || (github.event.inputs.archive_tarxz2 == 'true') }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}-${{ matrix.platform }}-src
          files: |
            ${{ env.ASSET_SRC }}
            ${{ env.ASSET_SRC1 }}
            ${{ env.ASSET_SRC2 }}
