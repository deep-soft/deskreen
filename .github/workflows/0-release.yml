#2024-05-07 18:00
name: 0 - release - no code sign

on:
  workflow_dispatch:
#  push:
#    # Sequence of patterns matched against refs/tags
#    tags:
#      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  TAG_NAME: deskreen

jobs:
#   create-release:
#     runs-on: ubuntu-latest
#     #runs-on: ubuntu-18.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
# 
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Deskreen Release ${{ github.ref }}
#           draft: true
#           # prerelease: false

  release:
#    name: Deskreen Release
    name: ${{ env.TAG_NAME }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - { platform: win, os: windows-2022, artifact_name: 'release/{*.msi,*.exe,*.blockmap,*.yml}' }
          # IMPORTANT!!! this LINUX os should be the same as in build-and-test and covecov workflows! this is for making sure caches are used in most efficient way
          - { platform: lin, os: ubuntu-22.04, artifact_name: 'release/{*.AppImage,*.rpm,*.deb,*.yml}' }
          - { platform: mac, os: macos-latest, artifact_name: 'release/{*.dmg,*.blockmap,*.yml}'       }

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ matrix.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ matrix.os }}-yarn-

      - name: yarn install in ./app/client
        run: |
          cd ./app/client
          yarn install --frozen-lockfile

      - name: yarn install in ./
        run: yarn install --frozen-lockfile

      - name: yarn install in ./app
        run: |
          cd ./app
          yarn install --frozen-lockfile

      - name: yarn build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn build

      - name: yarn lint
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn lint

      - name: yarn tsc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn tsc

      # - name: yarn test
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: yarn test

      # - name: yarn build-ux
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: yarn build-ux

      # - name: yarn test-ux
      #   uses: GabrielBB/xvfb-action@v1.2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     run: yarn test-ux

      - name: yarn package-ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn package-ci
      # TODO: add windows32 build step

      - name: Upload binaries to release
        uses: actions/create-release@v1
#        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}-${{ matrix.platform }}
          file: ${{ matrix.artifact_name }}
          # tags: true
          draft: true
